{"version":3,"sources":["api/users.ts","api/todos.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["usersFromServer","id","name","username","email","todosFromServer","title","completed","userId","UserInfo","user","className","href","TodoInfo","todo","classNames","TodoList","todos","map","findUserById","find","todosWithUser","App","useState","setTodos","newTodoTitle","setNewTodoTitle","newTodoUserId","setNewTodoUserId","hasTitleError","setHasTitleError","hasUserIdError","setHasUserIdError","action","method","onSubmit","event","preventDefault","newTodo","prevTodos","addTodo","Math","max","cn","type","placeholder","value","onChange","target","Number","disabled","ReactDOM","render","document","getElementById"],"mappings":"+QAiEeA,EA/DiB,CAC9B,CACEC,GAAI,EACJC,KAAM,gBACNC,SAAU,OACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,eACNC,SAAU,YACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,sBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,6BAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,SACVC,MAAO,4BAET,CACEH,GAAI,EACJC,KAAM,uBACNC,SAAU,mBACVC,MAAO,2BAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,eACVC,MAAO,0BAET,CACEH,GAAI,EACJC,KAAM,2BACNC,SAAU,gBACVC,MAAO,wBAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,WACVC,MAAO,2BAET,CACEH,GAAI,GACJC,KAAM,qBACNC,SAAU,iBACVC,MAAO,2BCtCIC,EArBiB,CAC9B,CACEJ,GAAI,EACJK,MAAO,qBACPC,WAAW,EACXC,OAAQ,GAEV,CACEP,GAAI,GACJK,MAAO,kBACPC,WAAW,EACXC,OAAQ,GAEV,CACEP,GAAI,EACJK,MAAO,qCACPC,WAAW,EACXC,OAAQ,I,qBCFGC,EAb2B,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAEzCR,EAEEQ,EAFFR,KACAE,EACEM,EADFN,MAGF,OACE,mBAAGO,UAAU,WAAWC,KAAI,iBAAYR,GAAxC,SACGF,KCkBQW,EAxB2B,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAEzCb,EAIEa,EAJFb,GACAK,EAGEQ,EAHFR,MACAC,EAEEO,EAFFP,UACAG,EACEI,EADFJ,KAGF,OACE,0BACE,UAAST,EACTU,UAAWI,IACT,WACA,CAAE,sBAAuBR,IAJ7B,UAQE,oBAAII,UAAU,kBAAd,SAAiCL,IAEhCI,GAAQ,cAAC,EAAD,CAAUA,KAAMA,QCbhBM,EAR2B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACxC,yBAASN,UAAU,WAAnB,SACGM,EAAMC,KAAI,SAACJ,GAAD,OACT,cAAC,EAAD,CAAwBA,KAAMA,GAAfA,EAAKb,UCEpBkB,EAAe,SAACX,GACpB,OAAOR,EAAgBoB,MAAK,SAAAV,GAAI,OAAIF,IAAWE,EAAKT,OAAO,MAGvDoB,EAAgChB,EAAgBa,KAAI,SAACJ,GAAD,mBAAC,eACtDA,GADqD,IAExDJ,KAAMS,EAAaL,EAAKN,aA+IXc,EA5IC,WACd,MAA0BC,mBAAyBF,GAAnD,mBAAOJ,EAAP,KAAcO,EAAd,KAEA,EAAwCD,mBAAS,IAAjD,mBAAOE,EAAP,KAAqBC,EAArB,KACA,EAA0CH,mBAAS,GAAnD,mBAAOI,EAAP,KAAsBC,EAAtB,KAEA,EAA0CL,oBAAS,GAAnD,mBAAOM,EAAP,KAAsBC,EAAtB,KACA,EAA4CP,oBAAS,GAArD,mBAAOQ,EAAP,KAAuBC,EAAvB,KA2BA,OACE,sBAAKrB,UAAU,MAAf,UACE,+CAEA,uBAAMsB,OAAO,IAAIC,OAAO,OAAOC,SAvBV,SAACC,IACxBA,EAAMC,iBAENP,GAAkBL,GAClBO,GAAmBL,GAEfF,GAAgBE,IAZN,SAACW,GACfd,GAAS,SAACe,GAAD,4BAAmBA,GAAnB,CAA8BD,OACvCZ,EAAgB,IAChBE,EAAiB,GAkBfY,CAR8B,CAC5BvC,GAAIwC,KAAKC,IAAL,MAAAD,KAAI,YAAQxB,EAAMC,KAAI,SAAAJ,GAAI,OAAIA,EAAKb,QAAO,EAC9CK,MAAOmB,EACPlB,WAAW,EACXC,OAAQmB,EACRjB,KAAMS,EAAaQ,MAWrB,UACE,sBAAKhB,UAAU,QAAf,UACE,kCACG,UACD,uBACEA,UAAWgC,IAAG,CAAE,aAAcd,IAC9Be,KAAK,OACL,UAAQ,aACRC,YAAY,gBACZC,MAAOrB,EACPsB,SAAU,SAACX,GACTV,EAAgBU,EAAMY,OAAOF,OAC7BhB,GAAiB,SAKtBD,GACC,sBAAMlB,UAAU,QAAhB,SACG,6BAKP,sBAAKA,UAAU,QAAf,UACE,kCACG,SACD,yBACE,UAAQ,aACRA,UAAWgC,IAAG,CAAE,aAAcZ,IAC9Be,MAAOnB,EACPoB,SAAU,SAACX,GACTR,EAAiBqB,OAAOb,EAAMY,OAAOF,QACrCd,GAAkB,IANtB,UASE,wBACEc,MAAM,IACNI,UAAQ,EAFV,2BAOClD,EAAgBkB,KAAI,SAACR,GAAD,OACnB,wBAAsBoC,MAAOpC,EAAKT,GAAlC,SACGS,EAAKR,MADKQ,EAAKT,aAOvB8B,GACC,sBAAMpB,UAAU,QAAhB,SACG,6BAKP,wBACEiC,KAAK,SACL,UAAQ,eACRjC,UAAU,eAHZ,yBAuCF,cAAC,EAAD,CAAUM,MAAOA,QCtJvBkC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.e713648f.chunk.js","sourcesContent":["import { User } from '../typedefs';\n\nconst usersFromServer: User[] = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n\nexport default usersFromServer;\n","import { Todo } from '../typedefs';\n\nconst todosFromServer: Todo[] = [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n\nexport default todosFromServer;\n","import React from 'react';\nimport './Userinfo.scss';\nimport { UserInfoProps } from '../../typedefs';\n\nconst UserInfo: React.FC<UserInfoProps> = ({ user }) => {\n  const {\n    name,\n    email,\n  } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n\nexport default UserInfo;\n","import React from 'react';\nimport classNames from 'classnames';\nimport './Todoinfo.scss';\nimport { TodoInfoProps } from '../../typedefs';\nimport UserInfo from '../UserInfo/UserInfo';\n\nconst TodoInfo: React.FC<TodoInfoProps> = ({ todo }) => {\n  const {\n    id,\n    title,\n    completed,\n    user,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={classNames(\n        'TodoInfo',\n        { 'TodoInfo--completed': completed },\n      )}\n    >\n\n      <h2 className=\"TodoInfo__title\">{title}</h2>\n\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n\nexport default TodoInfo;\n","import React from 'react';\nimport { TodoListProps } from '../../typedefs';\nimport TodoInfo from '../TodoInfo/TodoInfo';\n\nconst TodoList: React.FC<TodoListProps> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map((todo) => (\n      <TodoInfo key={todo.id} todo={todo} />\n    ))}\n  </section>\n);\n\nexport default TodoList;\n","import './App.scss';\nimport cn from 'classnames';\nimport { FC, FormEvent, useState } from 'react';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoWithUser } from './typedefs';\nimport TodoList from './components/TodoList/TodoList';\n\nconst findUserById = (userId: number) => {\n  return usersFromServer.find(user => userId === user.id) || null;\n};\n\nconst todosWithUser: TodoWithUser[] = todosFromServer.map((todo) => ({\n  ...todo,\n  user: findUserById(todo.userId),\n}));\n\nconst App: FC = () => {\n  const [todos, setTodos] = useState<TodoWithUser[]>(todosWithUser);\n\n  const [newTodoTitle, setNewTodoTitle] = useState('');\n  const [newTodoUserId, setNewTodoUserId] = useState(0);\n\n  const [hasTitleError, setHasTitleError] = useState(false);\n  const [hasUserIdError, setHasUserIdError] = useState(false);\n\n  const addTodo = (newTodo: TodoWithUser) => {\n    setTodos((prevTodos) => [...prevTodos, newTodo]);\n    setNewTodoTitle('');\n    setNewTodoUserId(0);\n  };\n\n  const handleFormSubmit = (event: FormEvent) => {\n    event.preventDefault();\n\n    setHasTitleError(!newTodoTitle);\n    setHasUserIdError(!newTodoUserId);\n\n    if (newTodoTitle && newTodoUserId) {\n      const newTodo: TodoWithUser = {\n        id: Math.max(...todos.map(todo => todo.id)) + 1,\n        title: newTodoTitle,\n        completed: false,\n        userId: newTodoUserId,\n        user: findUserById(newTodoUserId),\n      };\n\n      addTodo(newTodo);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form action=\"#\" method=\"POST\" onSubmit={handleFormSubmit}>\n        <div className=\"field\">\n          <label>\n            {'Title: '}\n            <input\n              className={cn({ 'with-error': hasTitleError })}\n              type=\"text\"\n              data-cy=\"titleInput\"\n              placeholder=\"Enter a title\"\n              value={newTodoTitle}\n              onChange={(event) => {\n                setNewTodoTitle(event.target.value);\n                setHasTitleError(false);\n              }}\n            />\n          </label>\n\n          {hasTitleError && (\n            <span className=\"error\">\n              {' Please enter a title'}\n            </span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label>\n            {'User: '}\n            <select\n              data-cy=\"userSelect\"\n              className={cn({ 'with-error': hasUserIdError })}\n              value={newTodoUserId}\n              onChange={(event) => {\n                setNewTodoUserId(Number(event.target.value));\n                setHasUserIdError(false);\n              }}\n            >\n              <option\n                value=\"0\"\n                disabled\n              >\n                Choose a user\n              </option>\n\n              {usersFromServer.map((user) => (\n                <option key={user.id} value={user.id}>\n                  {user.name}\n                </option>\n              ))}\n            </select>\n          </label>\n\n          {hasUserIdError && (\n            <span className=\"error\">\n              {' Please choose a user'}\n            </span>\n          )}\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n          className=\"submitButton\"\n        >\n          Add todo\n        </button>\n      </form>\n\n      {/* <form action=\"/api/users\" method=\"POST\">\n        <div className=\"field\">\n          <label>\n            {'Title: '}\n            <input\n              type=\"text\"\n              data-cy=\"titleInput\"\n              placeholder=\"Enter a title\"\n            />\n          </label>\n\n          <span className=\"error\">{' Please enter a title'}</span>\n        </div>\n\n        <div className=\"field\">\n          <label>\n            {'User: '}\n            <select data-cy=\"userSelect\">\n              <option value=\"0\" selected disabled>Choose a user</option>\n            </select>\n          </label>\n\n          <span className=\"error\">{' Please choose a user'}</span>\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form> */}\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}